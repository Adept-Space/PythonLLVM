Module(None, Stmt([From('math', [('*', None)], 0), From('MUDA', [('*', None)], 0), Function(None, 'cnd', ['d'], [Name('vec')], 0, None, Stmt([Assign([AssName('A1', 'OP_ASSIGN')], CallFunc(Name('vec'), [Const(0.31938153)], None, None)), Assign([AssName('A2', 'OP_ASSIGN')], CallFunc(Name('vec'), [UnarySub(Const(0.356563782))], None, None)), Assign([AssName('A3', 'OP_ASSIGN')], CallFunc(Name('vec'), [Const(1.781477937)], None, None)), Assign([AssName('A4', 'OP_ASSIGN')], CallFunc(Name('vec'), [UnarySub(Const(1.821255978))], None, None)), Assign([AssName('A5', 'OP_ASSIGN')], CallFunc(Name('vec'), [Const(1.330274429)], None, None)), Assign([AssName('RSQRT2PI', 'OP_ASSIGN')], CallFunc(Name('vec'), [Const(0.3989422804)], None, None)), Assign([AssName('K', 'OP_ASSIGN')], Div((CallFunc(Name('vec'), [Const(1.0)], None, None), Add((CallFunc(Name('vec'), [Const(1.0)], None, None), Mul((CallFunc(Name('vec'), [Const(0.2316419)], None, None), CallFunc(Name('vabs'), [Name('d')], None, None)))))))), Assign([AssName('cnd', 'OP_ASSIGN')], Mul((Mul((Name('RSQRT2PI'), CallFunc(Name('vexp'), [Mul((Mul((CallFunc(Name('vec'), [UnarySub(Const(0.5))], None, None), Name('d'))), Name('d')))], None, None))), Mul((Name('K'), Add((Name('A1'), Mul((Name('K'), Add((Name('A2'), Mul((Name('K'), Add((Name('A3'), Mul((Name('K'), Add((Name('A4'), Mul((Name('K'), Name('A5')))))))))))))))))))))), Assign([AssName('one_minus_cnd', 'OP_ASSIGN')], Sub((CallFunc(Name('vec'), [Const(1.0)], None, None), Name('cnd')))), Return(CallFunc(Name('vsel'), [Name('cnd'), Name('one_minus_cnd'), Compare(Name('d'), [('>', CallFunc(Name('vec'), [Const(0.0)], None, None))])], None, None))])), Function(None, 'BlackScholes', ['S', 'X', 'T', 'R', 'V'], [Name('vec'), Name('vec'), Name('vec'), Name('vec'), Name('vec')], 0, None, Stmt([Assign([AssName('sqrtT', 'OP_ASSIGN')], CallFunc(Name('vsqrt'), [Name('S')], None, None)), Assign([AssName('d1', 'OP_ASSIGN')], Div((Add((CallFunc(Name('vlog'), [Div((Name('S'), Name('X')))], None, None), Mul((Add((Name('R'), Mul((Mul((CallFunc(Name('vec'), [Const(0.5)], None, None), Name('V'))), Name('V'))))), Name('T'))))), Mul((Name('V'), Name('sqrtT')))))), Assign([AssName('d2', 'OP_ASSIGN')], Sub((Name('d1'), Mul((Name('V'), Name('sqrtT')))))), Assign([AssName('cnd_d1', 'OP_ASSIGN')], CallFunc(Name('cnd'), [Name('d1')], None, None)), Assign([AssName('cnd_d2', 'OP_ASSIGN')], CallFunc(Name('cnd'), [Name('d2')], None, None)), Assign([AssName('expRT', 'OP_ASSIGN')], CallFunc(Name('vexp'), [Mul((Mul((CallFunc(Name('vec'), [UnarySub(Const(1.0))], None, None), Name('R'))), Name('T')))], None, None)), Assign([AssName('retCall', 'OP_ASSIGN')], Sub((Mul((Name('S'), Name('cnd_d1'))), Mul((Mul((Name('X'), Name('expRT'))), Name('cnd_d2')))))), Return(Name('retCall'))]))]))
; [stmt] From('math', [('*', None)], 0)
; [stmt] From('MUDA', [('*', None)], 0)
; [stmt] Function(None, 'cnd', ['d'], [Name('vec')], 0, None, Stmt([Assign([AssName('A1', 'OP_ASSIGN')], CallFunc(Name('vec'), [Const(0.31938153)], None, None)), Assign([AssName('A2', 'OP_ASSIGN')], CallFunc(Name('vec'), [UnarySub(Const(0.356563782))], None, None)), Assign([AssName('A3', 'OP_ASSIGN')], CallFunc(Name('vec'), [Const(1.781477937)], None, None)), Assign([AssName('A4', 'OP_ASSIGN')], CallFunc(Name('vec'), [UnarySub(Const(1.821255978))], None, None)), Assign([AssName('A5', 'OP_ASSIGN')], CallFunc(Name('vec'), [Const(1.330274429)], None, None)), Assign([AssName('RSQRT2PI', 'OP_ASSIGN')], CallFunc(Name('vec'), [Const(0.3989422804)], None, None)), Assign([AssName('K', 'OP_ASSIGN')], Div((CallFunc(Name('vec'), [Const(1.0)], None, None), Add((CallFunc(Name('vec'), [Const(1.0)], None, None), Mul((CallFunc(Name('vec'), [Const(0.2316419)], None, None), CallFunc(Name('vabs'), [Name('d')], None, None)))))))), Assign([AssName('cnd', 'OP_ASSIGN')], Mul((Mul((Name('RSQRT2PI'), CallFunc(Name('vexp'), [Mul((Mul((CallFunc(Name('vec'), [UnarySub(Const(0.5))], None, None), Name('d'))), Name('d')))], None, None))), Mul((Name('K'), Add((Name('A1'), Mul((Name('K'), Add((Name('A2'), Mul((Name('K'), Add((Name('A3'), Mul((Name('K'), Add((Name('A4'), Mul((Name('K'), Name('A5')))))))))))))))))))))), Assign([AssName('one_minus_cnd', 'OP_ASSIGN')], Sub((CallFunc(Name('vec'), [Const(1.0)], None, None), Name('cnd')))), Return(CallFunc(Name('vsel'), [Name('cnd'), Name('one_minus_cnd'), Compare(Name('d'), [('>', CallFunc(Name('vec'), [Const(0.0)], None, None))])], None, None))]))
; [stmt] Assign([AssName('A1', 'OP_ASSIGN')], CallFunc(Name('vec'), [Const(0.31938153)], None, None))
; [Asgn]
; => CalFunc: CallFunc(Name('vec'), [Const(0.31938153)], None, None)
; => found type for  vec
; [Asgn]. rTy =  <class 'MUDA.vec'>
; [Asgn]. node.expr =  CallFunc(Name('vec'), [Const(0.31938153)], None, None)
; callfunc [Const(0.31938153)]
;   %tmp2 = load float* %tmp1
; callfuncafter [<llvm.core.Instruction object at 0x91cc12c>]
; callfuncafter: ty =  <class 'MUDA.vec'>
; [Asgn]. rhs =    %tmp6 = insertelement <4 x float> %tmp5, float %tmp2, i32 3
; [Sym] New symbol added:  A1(<class 'MUDA.vec'>) attrs: llstorage =   %A1 = alloca <4 x float>
;   store <4 x float> %tmp6, <4 x float>* %A1
; [Asgn] Assign([AssName('A1', 'OP_ASSIGN')], CallFunc(Name('vec'), [Const(0.31938153)], None, None))
; [Asgn] nodes =  [AssName('A1', 'OP_ASSIGN')]
; [Asgn] expr  =  CallFunc(Name('vec'), [Const(0.31938153)], None, None)
; [stmt] Assign([AssName('A2', 'OP_ASSIGN')], CallFunc(Name('vec'), [UnarySub(Const(0.356563782))], None, None))
; [Asgn]
; => CalFunc: CallFunc(Name('vec'), [UnarySub(Const(0.356563782))], None, None)
; => found type for  vec
; [Asgn]. rTy =  <class 'MUDA.vec'>
; [Asgn]. node.expr =  CallFunc(Name('vec'), [UnarySub(Const(0.356563782))], None, None)
; callfunc [UnarySub(Const(0.356563782))]
;   %tmp8 = load float* %tmp7
